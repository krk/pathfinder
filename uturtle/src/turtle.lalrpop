use crate::ast::*;

grammar;

T_NUMBER = {
    r"-?([0-9]+)\.([0-9]+)",
    r"-?([0-9]+)",
}

pub TopLevel: Vec<Command> = {
    Command*
};

pub Command: Command = {
    NoParam,
    Turn,
    Move,
    Direction,
    Go,
    GoX,
    GoY,
    PenWidth,
    PenColor,
};

pub NoParam: Command = {
    "reset" => Command::Reset,
    "penup" => Command::PenUp,
    "pendown" => Command::PenDown,
    "pushloc" => Command::PushLoc,
    "poploc" => Command::PopLoc,
    "pushrot" => Command::PushRot,
    "poprot" => Command::PopRot,
};

pub Turn: Command = {
    r"(turnright)|(turn)" <n:T_NUMBER?> => match n {
        None => Command::Turn(90.0),
        Some(n) => Command::Turn(n.parse().unwrap()),
    },
    "turnleft" <n:T_NUMBER?> => match n {
        None => Command::Turn(-90.0),
        Some(n) => Command::Turn(-n.parse::<f32>().unwrap()),
    }
};

pub Move: Command = {
    "forward" <n:T_NUMBER?> => match n {
        None => Command::Move(1.0),
        Some(n) => Command::Move(n.parse().unwrap()),
    },
    "backward" <n:T_NUMBER?> => match n {
        None => Command::Move(-1.0),
        Some(n) => Command::Move(-n.parse::<f32>().unwrap()),
    },
};

pub Direction: Command = {
    "direction" <T_NUMBER> => Command::Direction(<>.parse().unwrap()),
}

pub Go: Command = {
    "go" <x:T_NUMBER> <y:T_NUMBER> => Command::Go(x.parse().unwrap(), y.parse().unwrap()),
}

pub GoX: Command = {
    "gox" <T_NUMBER> => Command::GoX(<>.parse().unwrap()),
}

pub GoY: Command = {
    "goy" <T_NUMBER> => Command::GoY(<>.parse().unwrap()),
}

pub PenWidth: Command = {
    "penwidth" <T_NUMBER> => Command::PenWidth(<>.parse().unwrap()),
}

pub PenColor: Command = {
    "pencolor" <r:T_NUMBER> "," <g:T_NUMBER> "," <b:T_NUMBER> =>
        Command::PenColor(r.parse().unwrap(), g.parse().unwrap(), b.parse().unwrap()),
}
